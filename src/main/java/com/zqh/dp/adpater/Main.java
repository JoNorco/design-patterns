package com.zqh.dp.adpater;

/**
 * author: zqh
 * email：zqhfsf@gmail.com
 * date: 2018/2/28 15:10
 * description: 设计模式-适配器模式：
 *  将一个类的接口转化成用户需要的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
 *  适配器模式分为类适配器模式和对象适配器模式，由于在Java 中不支持多重继承，而且有破坏封装之嫌。而且我们也提倡多用组合少用继承。
 *  所以主要介绍对象适配器。
 *
 *
 *  优点
 将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，而无须修改原有代码。
 增加了类的透明性和复用性，将具体的实现封装在适配者类中，对于客户端类来说是透明的，而且提高了适配者的复用性。
 灵活性和扩展性都非常好，通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，完全符合“开闭原则”。

 缺点
 过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。
 因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。
 对于类适配器而言，由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类
 **/
public class Main {
    public static void main(String[] args) {
        Cat cat = new Adapter(new YellowDog()); // 适配器包装这条黄狗
        cat.meow(); // 调用猫叫，实际上狗叫
    }
}
